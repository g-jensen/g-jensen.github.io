["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$have","~$taoensso.encore","~$have?","^4"],"~:excludes",["~#set",[]],"~:name","~$taoensso.timbre","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^=","^=","~$enc","^4","^4","^4","~$core-appenders","~$taoensso.timbre.appenders.core","^@","^@","~$dtf","~$goog.i18n.DateTimeFormat","^B","^B"],"~:cljs.spec/speced-vars",[],"~:uses",["^ "],"~:defs",["^ ","~$default-output-msg-fn",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","~:line",462,"~:column",7,"~:end-line",462,"~:end-column",28,"~:arglists",["~#list",["~$quote",["^O",[[["^ ","~:keys",["~$msg-type","~$?msg-fmt","~$vargs","~$output-opts"],"~:as","~$data"]]]]]],"~:doc","(fn [data]) -> string, used by `default-output-fn` to generate output\n  for `:vargs` value (vector of raw logging arguments) in log data."],"^8","~$taoensso.timbre/default-output-msg-fn","^I","resources/public/cljs/taoensso/timbre.cljc","^M",28,"~:method-params",["^O",[["~$p__12113"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"~:variadic?",false,"^J",462,"~:ret-tag",["^7",["~$any","~$string"]],"^L",462,"~:max-fixed-arity",1,"~:fn-var",true,"^N",["^O",["^P",["^O",[[["^ ","^Q",["^R","^S","^T","^U"],"^V","^W"]]]]]],"^X","(fn [data]) -> string, used by `default-output-fn` to generate output\n  for `:vargs` value (vector of raw logging arguments) in log data."],"~$get-rate-limiter",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",300,"^K",28,"^L",300,"^M",44,"~:private",true],"^19",true,"^8","~$taoensso.timbre/get-rate-limiter","^I","resources/public/cljs/taoensso/timbre.cljc","^M",44,"^K",9,"^J",300,"^L",300,"~:tag","~$function"],"~$logging-enabled?",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1256,"^K",22,"^L",1256,"^M",38,"~:deprecated",true,"^N",["^O",["^P",["^O",[["~$level","~$compile-time-ns"]]]]]],"^8","~$taoensso.timbre/logging-enabled?","^I","resources/public/cljs/taoensso/timbre.cljc","^M",38,"^Z",["^O",[["^1?","^1@"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",1256,"^1>",true,"^13","^14","^L",1256,"^16",2,"^17",true,"^N",["^O",["^P",["^O",[["^1?","^1@"]]]]]],"~$valid-level",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",53,"^K",10,"^L",53,"^M",21,"^19",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"^19",true,"^8","~$taoensso.timbre/valid-level","^I","resources/public/cljs/taoensso/timbre.cljc","^M",21,"^Z",["^O",[["~$x"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",53,"^L",53,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"~$merge-config!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",30,"^K",7,"^L",30,"^M",20,"^N",["^O",["^P",["^O",[["~$config"]]]]]],"^8","~$taoensso.timbre/merge-config!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",20,"^Z",["^O",[["^1E"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",30,"^13","^14","^L",30,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["^1E"]]]]]],"~$log?",["^ ","^8","~$taoensso.timbre/log?","^I","resources/public/cljs/taoensso/timbre.cljc","^J",1254,"^K",3,"^L",1254,"^M",26,"^1>",true,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1254,"^K",22,"^L",1254,"^M",26,"^1>",true]],"~$str-join",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",454,"^K",8,"^L",454,"^M",16,"^19",true,"^N",["^O",["^P",["^O",[["~$xs"],["~$arg->str-fn","^1J"]]]]],"~:top-fn",["^ ","^12",false,"~:fixed-arity",2,"^16",2,"^Z",[["^1J"],["^1K","^1J"]],"^N",["^O",[["^1J"],["^1K","^1J"]]],"^11",["^O",[null,null]]]],"^19",true,"^8","~$taoensso.timbre/str-join","^I","resources/public/cljs/taoensso/timbre.cljc","^M",16,"^1L",["^ ","^12",false,"^1M",2,"^16",2,"^Z",[["^1J"],["^1K","^1J"]],"^N",["^O",[["^1J"],["^1K","^1J"]]],"^11",["^O",[null,null]]],"^Z",[["^1J"],["^1K","^1J"]],"^10",null,"^1M",2,"^11",["^O",[null,null]],"^K",1,"^12",false,"~:methods",[["^ ","^1M",1,"^12",false,"^1;","^14"],["^ ","^1M",2,"^12",false,"^1;",["^7",["^14","^15"]]]],"^J",454,"^L",454,"^16",2,"^17",true,"^N",["^O",[["^1J"],["^1K","^1J"]]]],"~$legacy-ns-filter",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",117,"^K",10,"^L",117,"^M",26,"^19",true,"^N",["^O",["^P",["^O",[["~$ns-whitelist","~$ns-blacklist"]]]]]],"^19",true,"^8","~$taoensso.timbre/legacy-ns-filter","^I","resources/public/cljs/taoensso/timbre.cljc","^M",26,"^Z",["^O",[["^1Q","^1R"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",117,"^13",["^7",["~$cljs.core/IMap","~$clj-nil"]],"^L",117,"^16",2,"^17",true,"^N",["^O",["^P",["^O",[["^1Q","^1R"]]]]]],"~$*config*",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1079,"^K",24,"^L",1079,"^M",32,"~:dynamic",true,"^X","This config map controls all Timbre behaviour including:\n    - When to log (via min-level and namespace filtering)\n    - How  to log (which appenders to use, etc.)\n    - What to log (how log data will be transformed to final\n                   output for use by appenders)\n\n  Initial config value will be (in descending order of preference):\n\n    1. `taoensso.timbre.config.edn`   JVM property  (read as EDN)\n    2. `TAOENSSO_TIMBRE_CONFIG_EDN`   Env var       (read as EDN)\n    3. `./taoensso.timbre.config.edn` resource file (read as EDN)\n    4. Value of `default-config`\n\n  For all EDN cases (1-3): the EDN can represent either a Clojure map\n  to merge into `default-config`, or a qualified symbol that'll\n  resolve to a Clojure map to merge into `default-config`.\n\n  See `default-config` for more info on the base/default config.\n\n  You can modify the config value with standard `alter-var-root`,\n  or `binding`.\n\n  For convenience, there's also some dedicated helper utils:\n\n    - `set-config!`, `merge-config!`        ; Mutate *config*\n    - `set-min-level!`, `set-min-ns-level!` ; Mutate *config* :min-level\n    - `with-config`, `with-merged-config`   ; Bind *config*\n    - `with-min-level`                      ; Bind *config* :min-level\n\n  MAIN CONFIG OPTIONS\n    :min-level\n      Logging will occur only if a logging call's level is >= this\n      min-level. Possible values, in order:\n\n        :trace  = level 0\n        :debug  = level 1 ; Default min-level\n        :info   = level 2\n        :warn   = level 3\n        :error  = level 4 ; Error type\n        :fatal  = level 5 ; Error type\n        :report = level 6 ; High general-purpose (non-error) type\n\n      It's also possible to set a namespace-specific min-level by\n      providing a vector that maps `ns-pattern`s to min-levels, e.g.:\n      `[[#{\"taoensso.*\"} :error] ... [#{\"*\"} :debug]]`.\n\n      Example `ns-pattern`s:\n        #{}, \"*\", \"foo.bar\", \"foo.bar.*\", #{\"foo\" \"bar.*\"},\n        {:allow #{\"foo\" \"bar.*\"} :deny #{\"foo.*.bar.*\"}}.\n\n      See also `set-min-ns-level!` for a helper tool.\n\n    :ns-filter\n      Logging will occur only if a logging call's namespace is permitted\n      by this ns-filter. Possible values:\n\n        - Arbitrary (fn may-log-ns? [ns]) predicate fn.\n        - An `ns-pattern` (see :min-level docs above).\n\n      Useful for turning off logging in noisy libraries, etc.\n\n    :middleware\n      Vector of simple (fn [data]) -> ?new-data fns (applied left->right)\n      that transform the data map dispatched to appender fns. If any middleware\n      returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n      Useful for layering advanced functionality. Similar to Ring middleware.\n\n    :timestamp-opts ; Config map, see `default-timestamp-opts`\n    :output-fn      ; (fn [data]) -> final output for use by appenders,\n                    ; see `default-output-fn` for example\n    :output-opts    ; Optional map added to data sent to output-fn\n\n    :appenders ; {<appender-id> <appender-map>}\n\n      Where each appender-map has keys:\n        :enabled?        ; Must be truthy to log\n        :min-level       ; Optional *additional* appender-specific min-level\n        :ns-filter       ; Optional *additional* appender-specific ns-filter\n\n        :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n                         ; Tip: consider calling (shutdown-agents) as part of your\n                         ; application shutdown if you have this enabled for any\n                         ; appenders.\n\n        :rate-limit      ; [[<ncalls-limit> <window-msecs>] ...], or nil\n                         ; Appender will noop a call after exceeding given number\n                         ; of the \"same\" calls within given rolling window/s.\n                         ;\n                         ; Example:\n                         ;   [[100  (encore/ms :mins  1)]\n                         ;    [1000 (encore/ms :hours 1)]] will noop a call after:\n                         ;\n                         ;   - >100  \"same\" calls in 1 rolling minute, or\n                         ;   - >1000 \"same\" calls in 1 rolling hour\n                         ;\n                         ; \"Same\" calls are identified by default as the\n                         ; combined hash of:\n                         ;   - Callsite (i.e. each individual Timbre macro form)\n                         ;   - Logging level\n                         ;   - All arguments provided for logging\n                         ;\n                         ; You can manually override call identification:\n                         ;   (timbre/infof ^:meta {:id \"my-limiter-call-id\"} ...)\n                         ;\n\n        :timestamp-opts  ; Optional appender-specific override for top-level option\n        :output-fn       ; Optional appender-specific override for top-level option\n        :output-opts     ; Optional appender-specific override for top-level option\n\n        :fn              ; (fn [data]) -> side-effects, with keys described below\n\n  LOG DATA\n    A single map with keys:\n      :config          ; Entire active config map\n      :context         ; `*context*` value at log time (see `with-context`)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Call's level keyword (e.g. :info) (>= active min-level)\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :spying?         ; Is call occuring via the `spy` macro?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :?meta           ; First-arg map when it has ^:meta metadata, used as a\n                         way of passing advanced per-call options to appenders\n      :vargs           ; Vector of raw args provided to logging call\n      :timestamp_      ; Forceable - string\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> final output for use by appenders\n      :output_         ; Forceable result of calling (output-fn <this-data-map>)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  COMPILE-TIME LEVEL/NS ELISION\n    To control :min-level and :ns-filter at compile-time, use:\n\n      - `taoensso.timbre.min-level.edn`  JVM property (read as EDN)\n      - `taoensso.timbre.ns-pattern.edn` JVM property (read as EDN)\n\n      - `TAOENSSO_TIMBRE_MIN_LEVEL_EDN`  env var      (read as EDN)\n      - `TAOENSSO_TIMBRE_NS_PATTERN_EDN` env var      (read as EDN)\n\n    Note that compile-time options will OVERRIDE options in `*config*`.\n\n  DEBUGGING INITIAL CONFIG\n    See `:_init-config` for information re: Timbre's config on initial load.\n    These keys are set only once on initial load, and changing them will\n    have no effect:\n      :loaded-from-source  ; e/o #{:default :prop :res :res-env}\n      :compile-time-config ; {:keys [min-level ns-filter]} for compile-time elision"],"^8","~$taoensso.timbre/*config*","^I","resources/public/cljs/taoensso/timbre.cljc","^M",32,"^K",1,"^1W",true,"^J",1079,"^L",1079,"^1;","^14","^X","This config map controls all Timbre behaviour including:\n    - When to log (via min-level and namespace filtering)\n    - How  to log (which appenders to use, etc.)\n    - What to log (how log data will be transformed to final\n                   output for use by appenders)\n\n  Initial config value will be (in descending order of preference):\n\n    1. `taoensso.timbre.config.edn`   JVM property  (read as EDN)\n    2. `TAOENSSO_TIMBRE_CONFIG_EDN`   Env var       (read as EDN)\n    3. `./taoensso.timbre.config.edn` resource file (read as EDN)\n    4. Value of `default-config`\n\n  For all EDN cases (1-3): the EDN can represent either a Clojure map\n  to merge into `default-config`, or a qualified symbol that'll\n  resolve to a Clojure map to merge into `default-config`.\n\n  See `default-config` for more info on the base/default config.\n\n  You can modify the config value with standard `alter-var-root`,\n  or `binding`.\n\n  For convenience, there's also some dedicated helper utils:\n\n    - `set-config!`, `merge-config!`        ; Mutate *config*\n    - `set-min-level!`, `set-min-ns-level!` ; Mutate *config* :min-level\n    - `with-config`, `with-merged-config`   ; Bind *config*\n    - `with-min-level`                      ; Bind *config* :min-level\n\n  MAIN CONFIG OPTIONS\n    :min-level\n      Logging will occur only if a logging call's level is >= this\n      min-level. Possible values, in order:\n\n        :trace  = level 0\n        :debug  = level 1 ; Default min-level\n        :info   = level 2\n        :warn   = level 3\n        :error  = level 4 ; Error type\n        :fatal  = level 5 ; Error type\n        :report = level 6 ; High general-purpose (non-error) type\n\n      It's also possible to set a namespace-specific min-level by\n      providing a vector that maps `ns-pattern`s to min-levels, e.g.:\n      `[[#{\"taoensso.*\"} :error] ... [#{\"*\"} :debug]]`.\n\n      Example `ns-pattern`s:\n        #{}, \"*\", \"foo.bar\", \"foo.bar.*\", #{\"foo\" \"bar.*\"},\n        {:allow #{\"foo\" \"bar.*\"} :deny #{\"foo.*.bar.*\"}}.\n\n      See also `set-min-ns-level!` for a helper tool.\n\n    :ns-filter\n      Logging will occur only if a logging call's namespace is permitted\n      by this ns-filter. Possible values:\n\n        - Arbitrary (fn may-log-ns? [ns]) predicate fn.\n        - An `ns-pattern` (see :min-level docs above).\n\n      Useful for turning off logging in noisy libraries, etc.\n\n    :middleware\n      Vector of simple (fn [data]) -> ?new-data fns (applied left->right)\n      that transform the data map dispatched to appender fns. If any middleware\n      returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n      Useful for layering advanced functionality. Similar to Ring middleware.\n\n    :timestamp-opts ; Config map, see `default-timestamp-opts`\n    :output-fn      ; (fn [data]) -> final output for use by appenders,\n                    ; see `default-output-fn` for example\n    :output-opts    ; Optional map added to data sent to output-fn\n\n    :appenders ; {<appender-id> <appender-map>}\n\n      Where each appender-map has keys:\n        :enabled?        ; Must be truthy to log\n        :min-level       ; Optional *additional* appender-specific min-level\n        :ns-filter       ; Optional *additional* appender-specific ns-filter\n\n        :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n                         ; Tip: consider calling (shutdown-agents) as part of your\n                         ; application shutdown if you have this enabled for any\n                         ; appenders.\n\n        :rate-limit      ; [[<ncalls-limit> <window-msecs>] ...], or nil\n                         ; Appender will noop a call after exceeding given number\n                         ; of the \"same\" calls within given rolling window/s.\n                         ;\n                         ; Example:\n                         ;   [[100  (encore/ms :mins  1)]\n                         ;    [1000 (encore/ms :hours 1)]] will noop a call after:\n                         ;\n                         ;   - >100  \"same\" calls in 1 rolling minute, or\n                         ;   - >1000 \"same\" calls in 1 rolling hour\n                         ;\n                         ; \"Same\" calls are identified by default as the\n                         ; combined hash of:\n                         ;   - Callsite (i.e. each individual Timbre macro form)\n                         ;   - Logging level\n                         ;   - All arguments provided for logging\n                         ;\n                         ; You can manually override call identification:\n                         ;   (timbre/infof ^:meta {:id \"my-limiter-call-id\"} ...)\n                         ;\n\n        :timestamp-opts  ; Optional appender-specific override for top-level option\n        :output-fn       ; Optional appender-specific override for top-level option\n        :output-opts     ; Optional appender-specific override for top-level option\n\n        :fn              ; (fn [data]) -> side-effects, with keys described below\n\n  LOG DATA\n    A single map with keys:\n      :config          ; Entire active config map\n      :context         ; `*context*` value at log time (see `with-context`)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Call's level keyword (e.g. :info) (>= active min-level)\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :spying?         ; Is call occuring via the `spy` macro?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :?meta           ; First-arg map when it has ^:meta metadata, used as a\n                         way of passing advanced per-call options to appenders\n      :vargs           ; Vector of raw args provided to logging call\n      :timestamp_      ; Forceable - string\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> final output for use by appenders\n      :output_         ; Forceable result of calling (output-fn <this-data-map>)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  COMPILE-TIME LEVEL/NS ELISION\n    To control :min-level and :ns-filter at compile-time, use:\n\n      - `taoensso.timbre.min-level.edn`  JVM property (read as EDN)\n      - `taoensso.timbre.ns-pattern.edn` JVM property (read as EDN)\n\n      - `TAOENSSO_TIMBRE_MIN_LEVEL_EDN`  env var      (read as EDN)\n      - `TAOENSSO_TIMBRE_NS_PATTERN_EDN` env var      (read as EDN)\n\n    Note that compile-time options will OVERRIDE options in `*config*`.\n\n  DEBUGGING INITIAL CONFIG\n    See `:_init-config` for information re: Timbre's config on initial load.\n    These keys are set only once on initial load, and changing them will\n    have no effect:\n      :loaded-from-source  ; e/o #{:default :prop :res :res-env}\n      :compile-time-config ; {:keys [min-level ns-filter]} for compile-time elision"],"~$*context*",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",543,"^K",16,"^L",543,"^M",25,"^1W",true],"^8","~$taoensso.timbre/*context*","^I","resources/public/cljs/taoensso/timbre.cljc","^M",25,"^K",1,"^1W",true,"^J",543,"^L",543,"^1;","^14","^X","General-purpose dynamic logging context"],"~$valid-level?",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",52,"^K",10,"^L",52,"^M",22,"^19",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"^19",true,"^8","~$taoensso.timbre/valid-level?","^I","resources/public/cljs/taoensso/timbre.cljc","^M",22,"^Z",["^O",[["~$x"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",52,"^13","~$boolean","^L",52,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"~$set-ns-min-level!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^M",28,"^1L",["^ ","^12",false,"^1M",2,"^16",2,"^Z",["^O",[["~$?min-level"],["~$ns","^23"]]],"^N",["^O",[["^23"],["^24","^23"]]],"^11",["^O",[null,null]]],"^K",11,"^J",282,"~:macro",true,"^L",282,"^N",["^O",["^P",["^O",[["^23"],["^24","^23"]]]]],"^X","Like `set-ns-min-level` but directly modifies `*config*`.\n\n  Can conveniently set the minimum log level for the current ns:\n    (set-ns-min-level! :info) => Sets min-level for current *ns*\n\n  See `set-ns-min-level` for details."],"^8","~$taoensso.timbre/set-ns-min-level!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",28,"^1L",["^ ","^12",false,"^1M",2,"^16",2,"^Z",["^O",[["^23"],["^24","^23"]]],"^N",["^O",[["^23"],["^24","^23"]]],"^11",["^O",[null,null]]],"^Z",["^O",[["^23"],["^24","^23"]]],"^10",null,"^1M",2,"^11",["^O",[null,null]],"^K",1,"^12",false,"^1O",[["^ ","^1M",3,"^12",false,"^1;",["^7",["~$seq","~$cljs.core/IList"]]],["^ ","^1M",4,"^12",false,"^1;",["^7",["^27","^28"]]]],"^J",282,"^25",true,"^L",282,"^16",2,"^17",false,"^N",["^O",[["^23"],["^24","^23"]]],"^X","Like `set-ns-min-level` but directly modifies `*config*`.\n\n  Can conveniently set the minimum log level for the current ns:\n    (set-ns-min-level! :info) => Sets min-level for current *ns*\n\n  See `set-ns-min-level` for details."],"~$-log!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",628,"^K",7,"^L",628,"^M",12,"^N",["^O",["^P",["^O",[["^1E","^1?","~$?ns-str","~$?file","~$?line","^R","~$?err","~$vargs_","~$?base-data"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","~$callsite-id"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@","~$spying?"]]]]],"^X","Core low-level log fn. Implementation detail!","^1L",["^ ","^12",false,"^1M",11,"^16",11,"^Z",[["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@","^2A"]],"^N",["^O",[["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@","^2A"]]],"^11",["^O",[null,null,null]]]],"^8","~$taoensso.timbre/-log!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",12,"^1L",["^ ","^12",false,"^1M",11,"^16",11,"^Z",[["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@","^2A"]],"^N",["^O",[["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@","^2A"]]],"^11",["^O",[null,null,null]]],"^Z",[["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@","^2A"]],"^10",null,"^1M",11,"^11",["^O",[null,null,null]],"^K",1,"^12",false,"^1O",[["^ ","^1M",9,"^12",false,"^1;","^14"],["^ ","^1M",10,"^12",false,"^1;","^14"],["^ ","^1M",11,"^12",false,"^1;","^1U"]],"^J",628,"^L",628,"^16",11,"^17",true,"^N",["^O",[["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@"],["^1E","^1?","^2:","^2;","^2<","^R","^2=","^2>","^2?","^2@","^2A"]]],"^X","Core low-level log fn. Implementation detail!"],"~$protected-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",608,"^K",8,"^L",608,"^M",20,"^19",true,"^N",["^O",["^P",["^O",[["~$error-msg","~$f"]]]]]],"^19",true,"^8","~$taoensso.timbre/protected-fn","^I","resources/public/cljs/taoensso/timbre.cljc","^M",20,"^Z",["^O",[["^2D","~$f"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",608,"^13","^1<","^L",608,"^16",2,"^17",true,"^N",["^O",["^P",["^O",[["^2D","~$f"]]]]]],"~$may-log-ns?",["^ ","^G",null,"^H",["^ ","^19",true,"^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^M",56,"^K",45,"^J",77,"^L",77,"^1;","^21","^N",["^O",["^P",["^O",[["~$ns-filter","^24"]]]]],"^X","Implementation detail."],"^19",true,"^8","~$taoensso.timbre/may-log-ns?","^I","resources/public/cljs/taoensso/timbre.cljc","^M",56,"^Z",["^O",[["^2G","^24"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",77,"^13","^21","^L",77,"^16",2,"^1;","^21","^17",true,"^N",["^O",["^P",["^O",[["^2G","^24"]]]]],"^X","Implementation detail."],"~$default-config",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1032,"^K",6,"^L",1032,"^M",20],"^8","~$taoensso.timbre/default-config","^I","resources/public/cljs/taoensso/timbre.cljc","^M",20,"^K",1,"^J",1032,"^L",1032,"^1;","^1T","^X","Default/example Timbre `*config*` value:\n\n    {:min-level :debug #_[[\"taoensso.*\" :error] [\"*\" :debug]]\n     :ns-filter #{\"*\"} #_{:deny #{\"taoensso.*\"} :allow #{\"*\"}}\n\n     :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n     :timestamp-opts default-timestamp-opts ; {:pattern _ :locale _ :timezone _}\n     :output-fn default-output-fn ; (fn [data]) -> final output for use by appenders\n\n     :appenders\n     #?(:clj\n        {:println (println-appender {:stream :auto})\n         ;; :spit (spit-appender    {:fname \"./timbre-spit.log\"})\n         }\n\n        :cljs\n        (if (exists? js/window)\n          {:console (console-appender {})}\n          {:println (println-appender {})}))}\n\n    See `*config*` for more info."],"~$fline",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",780,"^K",8,"^L",780,"^M",13,"^19",true,"^N",["^O",["^P",["^O",[["~$and-form"]]]]]],"^19",true,"^8","~$taoensso.timbre/fline","^I","resources/public/cljs/taoensso/timbre.cljc","^M",13,"^Z",["^O",[["^2L"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",780,"^13","^14","^L",780,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["^2L"]]]]]],"~$console-appender",["^ ","^8","~$taoensso.timbre/console-appender","^I","resources/public/cljs/taoensso/timbre.cljc","^J",1022,"^K",10,"^L",1022,"^M",31,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1022,"^K",15,"^L",1022,"^M",31]],"~$default-timestamp-opts",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1024,"^K",6,"^L",1024,"^M",28],"^8","~$taoensso.timbre/default-timestamp-opts","^I","resources/public/cljs/taoensso/timbre.cljc","^M",28,"^K",1,"^J",1024,"^L",1024,"^1;","^1T","^X","Controls (:timestamp_ data)"],"~$parse-vargs",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",569,"^K",8,"^L",569,"^M",19,"^19",true,"^N",["^O",["^P",["^O",[["^2=","^R","^T"]]]]],"^X","vargs -> [?err ?meta ?msg-fmt api-vargs]"],"^19",true,"^8","~$taoensso.timbre/parse-vargs","^I","resources/public/cljs/taoensso/timbre.cljc","^M",19,"^Z",["^O",[["^2=","^R","^T"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",569,"^13","~$cljs.core/IVector","^L",569,"^16",3,"^17",true,"^N",["^O",["^P",["^O",[["^2=","^R","^T"]]]]],"^X","vargs -> [?err ?meta ?msg-fmt api-vargs]"],"~$set-ns-min-level",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",236,"^K",7,"^L",236,"^M",23,"^N",["^O",["^P",["^O",[["^1E","^24","^23"]]]]],"^X","Returns given Timbre `config` with its `:min-level` modified so that\n  the given namespace has the specified minimum logging level.\n\n  When no namespace is provided, `*ns*` will be used.\n  When `?min-level` is nil, any minimum level specifications for the\n  *exact* given namespace will be removed.\n\n  See `*config*` docstring for more about `:min-level`.\n  See also `set-min-level!` for a util to directly modify `*config*`."],"^8","~$taoensso.timbre/set-ns-min-level","^I","resources/public/cljs/taoensso/timbre.cljc","^M",23,"^Z",["^O",[["^1E","^24","^23"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",236,"^13",["^7",["~$clj","^14"]],"^L",236,"^16",3,"^17",true,"^N",["^O",["^P",["^O",[["^1E","^24","^23"]]]]],"^X","Returns given Timbre `config` with its `:min-level` modified so that\n  the given namespace has the specified minimum logging level.\n\n  When no namespace is provided, `*ns*` will be used.\n  When `?min-level` is nil, any minimum level specifications for the\n  *exact* given namespace will be removed.\n\n  See `*config*` docstring for more about `:min-level`.\n  See also `set-min-level!` for a util to directly modify `*config*`."],"~$example-config",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1255,"^K",22,"^L",1255,"^M",36,"^1>",true],"^8","~$taoensso.timbre/example-config","^I","resources/public/cljs/taoensso/timbre.cljc","^M",36,"^K",3,"^J",1255,"^1>",true,"^L",1255,"^1;","^1T","^X","DEPRECATED, prefer `default-config`"],"~$may-log?",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^M",50,"^1L",["^ ","^12",false,"^1M",4,"^16",4,"^Z",[["^1?"],["^1?","^2:"],["^1?","^2:","~$?config"],["~$default-min-level","^1?","^2:","^2["]],"^N",["^O",[["^1?"],["^1?","^2:"],["^1?","^2:","^2["],["^30","^1?","^2:","^2["]]],"^11",["^O",[null,null,null,null]]],"^K",42,"^J",130,"^L",130,"^N",["^O",["^P",["^O",[["^1?"],["^1?","^2:"],["^1?","^2:","^2["],["^30","^1?","^2:","^2["]]]]],"^X","Implementation detail.\n    Returns true iff level and ns are runtime unfiltered.","~:boolean",true],"^8","~$taoensso.timbre/may-log?","^I","resources/public/cljs/taoensso/timbre.cljc","^M",50,"^1L",["^ ","^12",false,"^1M",4,"^16",4,"^Z",[["^1?"],["^1?","^2:"],["^1?","^2:","^2["],["^30","^1?","^2:","^2["]],"^N",["^O",[["^1?"],["^1?","^2:"],["^1?","^2:","^2["],["^30","^1?","^2:","^2["]]],"^11",["^O",[null,null,null,null]]],"^Z",[["^1?"],["^1?","^2:"],["^1?","^2:","^2["],["^30","^1?","^2:","^2["]],"^10",null,"^1M",4,"^11",["^O",[null,null,null,null]],"^K",3,"^12",false,"^1O",[["^ ","^1M",1,"^12",false,"^1;","^14"],["^ ","^1M",2,"^12",false,"^1;","^14"],["^ ","^1M",3,"^12",false,"^1;","^14"],["^ ","^1M",4,"^12",false,"^1;","^21"]],"^J",130,"^L",130,"^16",4,"^17",true,"^N",["^O",[["^1?"],["^1?","^2:"],["^1?","^2:","^2["],["^30","^1?","^2:","^2["]]],"^X","Implementation detail.\n    Returns true iff level and ns are runtime unfiltered.","^31",true],"~$level>=",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",57,"^K",41,"^L",57,"^M",48,"^31",true,"^N",["^O",["^P",["^O",[["~$x","~$y"]]]]],"^X","Implementation detail."],"^8","~$taoensso.timbre/level>=","^I","resources/public/cljs/taoensso/timbre.cljc","^M",48,"^Z",["^O",[["~$x","~$y"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",57,"^13","^21","^L",57,"^16",2,"^17",true,"^N",["^O",["^P",["^O",[["~$x","~$y"]]]]],"^X","Implementation detail.","^31",true],"~$set-config!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",29,"^K",9,"^L",29,"^M",20,"^N",["^O",["^P",["^O",[["^1E"]]]]]],"^8","~$taoensso.timbre/set-config!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",20,"^Z",["^O",[["^1E"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",29,"^13","^14","^L",29,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["^1E"]]]]]],"~$get-timestamp",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",306,"^K",8,"^L",306,"^M",21,"^19",true,"^N",["^O",["^P",["^O",[["~$timestamp-opts","~$instant"]]]]]],"^19",true,"^8","~$taoensso.timbre/get-timestamp","^I","resources/public/cljs/taoensso/timbre.cljc","^M",21,"^Z",["^O",[["^38","^39"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",306,"^13",["^7",["^14","~$js/String"]],"^L",306,"^16",2,"^17",true,"^N",["^O",["^P",["^O",[["^38","^39"]]]]]],"~$set-min-level!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",231,"^K",7,"^L",231,"^M",21,"^N",["^O",["^P",["^O",[["~$min-level"]]]]]],"^8","~$taoensso.timbre/set-min-level!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",21,"^Z",["^O",[["^3="]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",231,"^13","^14","^L",231,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["^3="]]]]]],"~$swap-config!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",25,"^K",7,"^L",25,"^M",19,"^N",["^O",["^P",["^O",[["~$f","~$&","~$args"]]]]],"^1L",["^ ","^12",true,"^1M",1,"^16",1,"^Z",[["^O",["~$f","^3@"]]],"^N",["^O",[["~$f","~$&","^3@"]]],"^11",["^O",[null]]]],"^8","~$taoensso.timbre/swap-config!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",19,"^1L",["^ ","^12",true,"^1M",1,"^16",1,"^Z",[["^O",["~$f","^3@"]]],"^N",["^O",[["~$f","~$&","^3@"]]],"^11",["^O",[null]]],"^Z",[["^O",["~$f","^3@"]]],"^10",null,"^1M",1,"^11",["^O",[null]],"^K",1,"^12",true,"^1O",[["^ ","^1M",1,"^12",true]],"^J",25,"^13","^14","^L",25,"^16",1,"^17",true,"^N",["^O",[["~$f","~$&","^3@"]]]],"~$console-?appender",["^ ","^8","~$taoensso.timbre/console-?appender","^I","resources/public/cljs/taoensso/timbre.cljc","^J",1252,"^K",12,"^L",1252,"^M",47,"^1>",true,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1252,"^K",30,"^L",1252,"^M",47,"^1>",true]],"~$str-println",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1257,"^K",22,"^L",1257,"^M",33,"^1>",true,"^N",["^O",["^P",["^O",[["~$&","^1J"]]]]],"^1L",["^ ","^12",true,"^1M",0,"^16",0,"^Z",[["^O",["^1J"]]],"^N",["^O",[["~$&","^1J"]]],"^11",["^O",[null]]]],"^8","~$taoensso.timbre/str-println","^I","resources/public/cljs/taoensso/timbre.cljc","^M",33,"^1L",["^ ","^12",true,"^1M",0,"^16",0,"^Z",[["^O",["^1J"]]],"^N",["^O",[["~$&","^1J"]]],"^11",["^O",[null]]],"^Z",[["^O",["^1J"]]],"^10",null,"^1M",0,"^11",["^O",[null]],"^K",3,"^12",true,"^1O",[["^ ","^1M",0,"^12",true,"^1;","^14"]],"^J",1257,"^1>",true,"^13","^14","^L",1257,"^16",0,"^17",true,"^N",["^O",[["~$&","^1J"]]]],"~$set-level!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1268,"^K",22,"^L",1268,"^M",32,"^1>",true,"^N",["^O",["^P",["^O",[["^1?"]]]]],"^X","DEPRECATED, prefer `set-min-level!`"],"^8","~$taoensso.timbre/set-level!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",32,"^Z",["^O",[["^1?"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",1268,"^1>",true,"^13","^14","^L",1268,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["^1?"]]]]],"^X","DEPRECATED, prefer `set-min-level!`"],"~$valid-level->int",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",54,"^K",10,"^L",54,"^M",26,"^19",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"^19",true,"^8","~$taoensso.timbre/valid-level->int","^I","resources/public/cljs/taoensso/timbre.cljc","^M",26,"^Z",["^O",[["~$x"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",54,"^13","^14","^L",54,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"~$default-output-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",383,"^K",7,"^L",383,"^M",24,"^N",["^O",["^P",["^O",[["~$base-output-opts","^W"],["^W"]]]]],"^X","Default (fn [data]) -> final output string, used to produce\n  final formatted output_ string from final log data.\n\n  Options (included as `:output-opts` in data sent to fns below):\n\n    :error-fn ; When present and (:?err data) present,\n              ; (error-fn data) will be called to generate output\n              ; (e.g. a stacktrace) for the error.\n              ;\n              ; Default value: `default-output-error-fn`.\n              ; Use `nil` value to exclude error output.\n\n    :msg-fn   ; When present, (msg-fn data) will be called to\n              ; generate a message from `vargs` (vector of raw\n              ; logging arguments).\n              ;\n              ; Default value: `default-output-msg-fn`.\n              ; Use `nil` value to exclude message output.","^1L",["^ ","^12",false,"^1M",2,"^16",2,"^Z",[["^3K","^W"],["^W"]],"^N",["^O",[["^3K","^W"],["^W"]]],"^11",["^O",[null,null]]]],"^8","~$taoensso.timbre/default-output-fn","^I","resources/public/cljs/taoensso/timbre.cljc","^M",24,"^1L",["^ ","^12",false,"^1M",2,"^16",2,"^Z",[["^3K","^W"],["^W"]],"^N",["^O",[["^3K","^W"],["^W"]]],"^11",["^O",[null,null]]],"^Z",[["^3K","^W"],["^W"]],"^10",null,"^1M",2,"^11",["^O",[null,null]],"^K",1,"^12",false,"^1O",[["^ ","^1M",2,"^12",false,"^1;","^14"],["^ ","^1M",1,"^12",false,"^1;","^15"]],"^J",383,"^L",383,"^16",2,"^17",true,"^N",["^O",[["^3K","^W"],["^W"]]],"^X","Default (fn [data]) -> final output string, used to produce\n  final formatted output_ string from final log data.\n\n  Options (included as `:output-opts` in data sent to fns below):\n\n    :error-fn ; When present and (:?err data) present,\n              ; (error-fn data) will be called to generate output\n              ; (e.g. a stacktrace) for the error.\n              ;\n              ; Default value: `default-output-error-fn`.\n              ; Use `nil` value to exclude error output.\n\n    :msg-fn   ; When present, (msg-fn data) will be called to\n              ; generate a message from `vargs` (vector of raw\n              ; logging arguments).\n              ;\n              ; Default value: `default-output-msg-fn`.\n              ; Use `nil` value to exclude message output."],"~$legacy-arg->str-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",448,"^K",8,"^L",448,"^M",26,"^19",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"^19",true,"^8","~$taoensso.timbre/legacy-arg->str-fn","^I","resources/public/cljs/taoensso/timbre.cljc","^M",26,"^Z",["^O",[["~$x"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",448,"^13",["^7",[null,"^15"]],"^L",448,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"~$default-arg->str-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",440,"^K",8,"^L",440,"^M",27,"^19",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"^19",true,"^8","~$taoensso.timbre/default-arg->str-fn","^I","resources/public/cljs/taoensso/timbre.cljc","^M",27,"^Z",["^O",[["~$x"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",440,"^13","^15","^L",440,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[["~$x"]]]]]],"~$ns->?min-level",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",81,"^K",18,"^L",81,"^M",32,"^19",true],"^19",true,"^8","~$taoensso.timbre/ns->?min-level","^I","resources/public/cljs/taoensso/timbre.cljc","^M",32,"^K",3,"^J",81,"^L",81,"^1;","^1<","^X","[[<ns-pattern> <min-level>] ... [\"*\" <default-min-level>]], ns -> ?min-level"],"~$println-appender",["^ ","^8","~$taoensso.timbre/println-appender","^I","resources/public/cljs/taoensso/timbre.cljc","^J",1021,"^K",10,"^L",1021,"^M",31,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1021,"^K",15,"^L",1021,"^M",31]],"~$ordered-levels",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",1253,"^K",22,"^L",1253,"^M",36,"^1>",true],"^8","~$taoensso.timbre/ordered-levels","^I","resources/public/cljs/taoensso/timbre.cljc","^M",36,"^K",3,"^J",1253,"^1>",true,"^L",1253,"^1;","^2T"],"~$shutdown-appenders!",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",984,"^K",7,"^L",984,"^M",26,"^N",["^O",["^P",["^O",[[],["^1E"]]]]],"^X","Alpha, subject to change.\n\n  Iterates through all appenders in config (enabled or not), and\n  calls (:shutdown-fn appender) whenever that fn exists.\n\n  This signals to these appenders that they should immediately\n  close/release any resources that they may have open/acquired,\n  and permanently noop on future logging requests.\n\n  Returns the set of appender-ids that had a shutdown-fn called.\n\n  This fn is called automatically on JVM shutdown, but can also\n  be called manually.","^1L",["^ ","^12",false,"^1M",1,"^16",1,"^Z",[[],["^1E"]],"^N",["^O",[[],["^1E"]]],"^11",["^O",[null,null]]]],"^8","~$taoensso.timbre/shutdown-appenders!","^I","resources/public/cljs/taoensso/timbre.cljc","^M",26,"^1L",["^ ","^12",false,"^1M",1,"^16",1,"^Z",[[],["^1E"]],"^N",["^O",[[],["^1E"]]],"^11",["^O",[null,null]]],"^Z",[[],["^1E"]],"^10",null,"^1M",1,"^11",["^O",[null,null]],"^K",1,"^12",false,"^1O",[["^ ","^1M",0,"^12",false,"^1;","^14"],["^ ","^1M",1,"^12",false,"^1;",["^7",[null,"^14"]]]],"^J",984,"^L",984,"^16",1,"^17",true,"^N",["^O",[[],["^1E"]]],"^X","Alpha, subject to change.\n\n  Iterates through all appenders in config (enabled or not), and\n  calls (:shutdown-fn appender) whenever that fn exists.\n\n  This signals to these appenders that they should immediately\n  close/release any resources that they may have open/acquired,\n  and permanently noop on future logging requests.\n\n  Returns the set of appender-ids that had a shutdown-fn called.\n\n  This fn is called automatically on JVM shutdown, but can also\n  be called manually."],"~$default-output-error-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",495,"^K",7,"^L",495,"^M",30,"^N",["^O",["^P",["^O",[[["^ ","^Q",["^2=","^U"],"^V","^W"]]]]]],"^X","Default (fn [data]) -> string, used by `default-output-fn` to\n  generate output for `:?err` value in log data.\n\n  For Clj:\n     Uses `io.aviso/pretty` to return an attractive stacktrace.\n     Options:\n       :stacktrace-fonts ; See `io.aviso.exception/*fonts*`\n\n  For Cljs:\n     Returns simple stacktrace string."],"^8","~$taoensso.timbre/default-output-error-fn","^I","resources/public/cljs/taoensso/timbre.cljc","^M",30,"^Z",["^O",[["~$p__12119"]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",495,"^13","^15","^L",495,"^16",1,"^17",true,"^N",["^O",["^P",["^O",[[["^ ","^Q",["^2=","^U"],"^V","^W"]]]]]],"^X","Default (fn [data]) -> string, used by `default-output-fn` to\n  generate output for `:?err` value in log data.\n\n  For Clj:\n     Uses `io.aviso/pretty` to return an attractive stacktrace.\n     Options:\n       :stacktrace-fonts ; See `io.aviso.exception/*fonts*`\n\n  For Cljs:\n     Returns simple stacktrace string."],"~$stacktrace",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^M",31,"^1L",["^ ","^12",false,"^1M",2,"^16",2,"^Z",[["~$err"],["^41","~$opts"]],"^N",["^O",[["^41"],["^41","^42"]]],"^11",["^O",[null,null]]],"~:deprected",true,"^K",21,"^J",1275,"^L",1275,"^N",["^O",["^P",["^O",[["^41"],["^41","^42"]]]]],"^X","DEPRECATED, use `default-output-error-fn` instead"],"^8","~$taoensso.timbre/stacktrace","^I","resources/public/cljs/taoensso/timbre.cljc","^M",31,"^1L",["^ ","^12",false,"^1M",2,"^16",2,"^Z",[["^41"],["^41","^42"]],"^N",["^O",[["^41"],["^41","^42"]]],"^11",["^O",[null,null]]],"^Z",[["^41"],["^41","^42"]],"^10",null,"^1M",2,"^43",true,"^11",["^O",[null,null]],"^K",3,"^12",false,"^1O",[["^ ","^1M",1,"^12",false,"^1;","^14"],["^ ","^1M",2,"^12",false,"^1;","^15"]],"^J",1275,"^L",1275,"^16",2,"^17",true,"^N",["^O",[["^41"],["^41","^42"]]],"^X","DEPRECATED, use `default-output-error-fn` instead"],"~$get-min-level",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",102,"^K",10,"^L",102,"^M",23,"^19",true,"^N",["^O",["^P",["^O",[["~$default","~$x","^24"]]]]]],"^19",true,"^8","~$taoensso.timbre/get-min-level","^I","resources/public/cljs/taoensso/timbre.cljc","^M",23,"^Z",["^O",[["^46","~$x","^24"]]],"^10",null,"^11",["^O",[null,null]],"^K",3,"^12",false,"^J",102,"^13","^14","^L",102,"^16",3,"^17",true,"^N",["^O",["^P",["^O",[["^46","~$x","^24"]]]]]],"~$set-min-level",["^ ","^G",null,"^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",230,"^K",7,"^L",230,"^M",20,"^N",["^O",["^P",["^O",[["^1E","^3="]]]]]],"^8","~$taoensso.timbre/set-min-level","^I","resources/public/cljs/taoensso/timbre.cljc","^M",20,"^Z",["^O",[["^1E","^3="]]],"^10",null,"^11",["^O",[null,null]],"^K",1,"^12",false,"^J",230,"^13",["^7",["^2W","^14"]],"^L",230,"^16",2,"^17",true,"^N",["^O",["^P",["^O",[["^1E","^3="]]]]]],"~$callsite-counter",["^ ","^H",["^ ","^I","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre.cljc","^J",782,"^K",24,"^L",782,"^M",40,"^19",true,"^X","Simple counter, used to uniquely identify each log macro expansion."],"^19",true,"^8","~$taoensso.timbre/callsite-counter","^I","resources/public/cljs/taoensso/timbre.cljc","^M",40,"^K",1,"^J",782,"^L",782,"^1;","^14","^X","Simple counter, used to uniquely identify each log macro expansion."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^9","^9","^>","^4","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:given","~:ns-whitelist","~:inherit","~:report","~:shutdown-fn","~:output-opts","~:fn","~:hash","^H","~:hash_","~:ns-blacklist","~:instant","~:rate-limit","~:else","~:spying?","~:config","~:vargs","~:output_","~:msg_","~:middleware-fn","~:warn","~:timestamp-opts","~:trace","~:println","~:iso8601","~:err","~:?file","~:msg-fn","~:type","~:id!","~:debug","~:hostname_","~:error-level?","~:appender","~:appender-id","~:?ns-str","~:allow","^24","~:enabled?","^3A","~:ns-filter","~:middleware","~:fatal","~:level","~:error-fn","~:msg-type","^26","~:output-fn","^J","~:?err","~:id","^2V","~$cljs.core/fn","~:info","~:no-stacktrace?","~:timestamp_","~:context","~:?line","~:min-level","~$config__12092__auto__","~:f","~:error","~:console","^9","^2=","~$taoensso.truss.impl/some?","~:?meta","~:deny","~:location","~:auto","~:p","~:?msg-fmt","~:async?","~:arg->str-fn","~:appenders","~:pattern","~:data"]],"~:order",["^4@","^4[","^57","^5N","^4U","^5H","^5<","^59","^4A","^4I","^4L","^9","^5L","^24","^26","^3A","^5B","^5I","^2V","^5U","^4W","^4E","^4Q","^4Y","^52","^56","^5@","^5E","^5G","^4Z","^5=","^5D","^5>","^5Q","^4O","^5S","~:p","~:f","^2=","^5P","^H","^4X","^5V","^5O","^5?","^4C","^4J","^4M","^4N","^53","^5F","^5M","^5;","^5J","^5:","^4H","^5A","^50","^4G","^4T","^4B","^58","^4K","^4F","^5R","^55","^54","^4P","^4R","^5T","^J","^4D","^51","^5K","^4V","^5C","^4S"]],"^X","Simple, flexible logging for Clojure/Script. No XML."]