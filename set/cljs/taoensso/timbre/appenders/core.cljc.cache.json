["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$have","~$taoensso.encore","~$have?","^4"],"~:excludes",["~#set",[]],"~:name","~$taoensso.timbre.appenders.core","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^=","^=","~$enc","^4","^4","^4"],"~:cljs.spec/speced-vars",[],"~:uses",["^ "],"~:defs",["^ ","~$println-appender",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre/appenders/core.cljc","~:line",23,"~:column",7,"~:end-line",23,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^K",[["~$&",["~$_opts"]]]]]],"~:doc","Returns a simple `println` appender for Clojure/Script.\n  Use with ClojureScript requires that `cljs.core/*print-fn*` be set.\n\n  :stream (clj only) - e/o #{:auto :*out* :*err* :std-err :std-out <io-stream>}.","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",0,"~:max-fixed-arity",0,"~:method-params",[["^K",[["^M"]]]],"^J",["^K",[["~$&",["^M"]]]],"~:arglists-meta",["^K",[null]]]],"^8","~$taoensso.timbre.appenders.core/println-appender","^E","resources/public/cljs/taoensso/timbre/appenders/core.cljc","^I",23,"^O",["^ ","^P",true,"^Q",0,"^R",0,"^S",[["^K",[["^M"]]]],"^J",["^K",[["~$&",["^M"]]]],"^T",["^K",[null]]],"^S",[["^K",[["^M"]]]],"~:protocol-impl",null,"^Q",0,"^T",["^K",[null]],"^G",1,"^P",true,"~:methods",[["^ ","^Q",0,"^P",true,"~:tag","~$cljs.core/IMap"]],"^F",23,"~:ret-tag","~$any","^H",23,"^R",0,"~:fn-var",true,"^J",["^K",[["~$&",["^M"]]]],"^N","Returns a simple `println` appender for Clojure/Script.\n  Use with ClojureScript requires that `cljs.core/*print-fn*` be set.\n\n  :stream (clj only) - e/o #{:auto :*out* :*err* :std-err :std-out <io-stream>}."],"~$console-appender",["^ ","^C",null,"^D",["^ ","^E","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre/appenders/core.cljc","^F",101,"^G",10,"^H",101,"^I",26,"^J",["^K",["^L",["^K",[["~$&",[["^ ","~:keys",["~$raw-console?"]]]]]]]],"^N","Returns a simple js/console appender for ClojureScript.\n\n     Raw logging\n\n       There's 2 ways that Timbre can log to a web browser console:\n         1. As a prepared output string (default)\n         2. As a list of raw argument objects\n\n       The benefit of #2 is that it allows the browser to offer type-specific\n       object printing and inspection (e.g. for maps, etc.).\n\n       Raw logging can be enabled or disabled as follows:\n\n         1. On a per-call basis via a special 1st argument to your logging call:\n              (info ^:meta {:raw-console? true} arg1 ...)\n\n         2. Via middleware, by adding an option to your log data:\n              (fn my-middleware [data] (assoc data :raw-console? true))\n\n         3. Via an option provided to this appender constructor:\n              (console-appender {:raw-console? <bool>})\n\n     Ignoring library / \"blackbox\" code for accurate line numbers, etc.\n\n       Most web browsers offer a feature to ignore library or \"blackbox\" code\n       in their debugger.\n\n       You'll probably want to ignore at least the following:\n         `/taoensso/timbre/appenders/core\\.js$` ; Timbre console appender\n         `/taoensso/timbre\\.js$`                ; Timbre core\n         `/cljs/core\\.js$`                      ; ClojureScript core\n\n       Depending on the browser, you can usually set up these exclusions through\n       right-click popups and/or through a configurable list in a settings menu.\n\n       For example:\n         https://developer.chrome.com/docs/devtools/settings/ignore-list/\n         https://webkit.org/web-inspector/web-inspector-settings/\n         https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/ignoring_sources/index.html\n         etc.","^O",["^ ","^P",true,"^Q",0,"^R",0,"^S",[["^K",[[["^ ","^12",["^13"]]]]]],"^J",["^K",[["~$&",[["^ ","^12",["^13"]]]]]],"^T",["^K",[null]]]],"^8","~$taoensso.timbre.appenders.core/console-appender","^E","resources/public/cljs/taoensso/timbre/appenders/core.cljc","^I",26,"^O",["^ ","^P",true,"^Q",0,"^R",0,"^S",[["^K",[[["^ ","^12",["^13"]]]]]],"^J",["^K",[["~$&",[["^ ","^12",["^13"]]]]]],"^T",["^K",[null]]],"^S",[["^K",[[["^ ","^12",["^13"]]]]]],"^V",null,"^Q",0,"^T",["^K",[null]],"^G",4,"^P",true,"^W",[["^ ","^Q",0,"^P",true,"^X","^Y"]],"^F",101,"^Z","^[","^H",101,"^R",0,"^10",true,"^J",["^K",[["~$&",[["^ ","^12",["^13"]]]]]],"^N","Returns a simple js/console appender for ClojureScript.\n\n     Raw logging\n\n       There's 2 ways that Timbre can log to a web browser console:\n         1. As a prepared output string (default)\n         2. As a list of raw argument objects\n\n       The benefit of #2 is that it allows the browser to offer type-specific\n       object printing and inspection (e.g. for maps, etc.).\n\n       Raw logging can be enabled or disabled as follows:\n\n         1. On a per-call basis via a special 1st argument to your logging call:\n              (info ^:meta {:raw-console? true} arg1 ...)\n\n         2. Via middleware, by adding an option to your log data:\n              (fn my-middleware [data] (assoc data :raw-console? true))\n\n         3. Via an option provided to this appender constructor:\n              (console-appender {:raw-console? <bool>})\n\n     Ignoring library / \"blackbox\" code for accurate line numbers, etc.\n\n       Most web browsers offer a feature to ignore library or \"blackbox\" code\n       in their debugger.\n\n       You'll probably want to ignore at least the following:\n         `/taoensso/timbre/appenders/core\\.js$` ; Timbre console appender\n         `/taoensso/timbre\\.js$`                ; Timbre core\n         `/cljs/core\\.js$`                      ; ClojureScript core\n\n       Depending on the browser, you can usually set up these exclusions through\n       right-click popups and/or through a configurable list in a settings menu.\n\n       For example:\n         https://developer.chrome.com/docs/devtools/settings/ignore-list/\n         https://webkit.org/web-inspector/web-inspector-settings/\n         https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/ignoring_sources/index.html\n         etc."],"~$console-?appender",["^ ","^D",["^ ","^E","/Users/gjensen/code/set/resources/public/cljs/taoensso/timbre/appenders/core.cljc","^F",203,"^G",30,"^H",203,"^I",47,"~:deprecated",true],"^8","~$taoensso.timbre.appenders.core/console-?appender","^E","resources/public/cljs/taoensso/timbre/appenders/core.cljc","^I",47,"^G",12,"^F",203,"^16",true,"^H",203,"^N","DEPRECATED"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^>","^4","^4","^4"],"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:fn","~:vargs","~:output_","~:msg_","~:enabled?","~:level","~:output-fn","~:?err","~:raw-console?","~:?meta"]],"~:order",["^1@","^1<","^1>","^1D","^1A","^1E","^1B","^1?","^1C","^1="]],"^N","Core Timbre appenders without any special dependency requirements.\n  These can be aliased into the main Timbre ns for convenience."]